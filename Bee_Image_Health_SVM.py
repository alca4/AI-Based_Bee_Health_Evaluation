# -*- coding: utf-8 -*-
"""GitHub Bee Image Health SVM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ykN00HXLFZ-kbKqxHhARj1sMA1eNafk-
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline
import cv2
import os
from tqdm import tqdm

DATADIR = './Downloads/Bee_Images_Health_Merge_Class4_Out3_Class/'
CATEGORIES = ['ants','pesti','healthy','missing']
IMG_SIZE=100

for category in CATEGORIES:
    path=os.path.join(DATADIR, category)
    for img in os.listdir(path):
        img_array=cv2.imread(os.path.join(path,img))
        plt.imshow(img_array)
        plt.show()
        break
    break

data=[]
def create_data():
    for category in CATEGORIES:
        path=os.path.join(DATADIR, category)
        class_num=CATEGORIES.index(category)
        for img in os.listdir(path):
            try:
                img_array=cv2.imread(os.path.join(path,img))
                new_array=cv2.resize(img_array,(IMG_SIZE,IMG_SIZE))
                data.append([new_array,class_num])
            except Exception as e:
                pass
create_data()

print(len(data))
lenofimage = len(data)

X=[]
y=[]

for categories, label in data:
    X.append(categories)
    y.append(label)
X= np.array(X).reshape(lenofimage,-1)

X.shape
X = X/255.0

X[1]

y=np.array(y)
y.shape

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.1, random_state = 42)

#Fitting data in SVM model

from sklearn.svm import SVC
svc = SVC(kernel='linear',gamma='auto')
svc.fit(X_train, y_train)

#predicting the X_test
y2 = svc.predict(X_test)

from sklearn.metrics import accuracy_score
print("Accuracy on unknown data is",accuracy_score(y_test,y2))

#fromulating the Classification report
from sklearn.metrics import classification_report
print("Accuracy on unknown data is",classification_report(y_test,y2,digits=4))

result = pd.DataFrame({'original' : y_test,'predicted' : y2})
result

# Run SVM with default hyperparameters

# import SVC classifier
from sklearn.svm import SVC


# import metrics to compute accuracy
from sklearn.metrics import accuracy_score


# instantiate classifier with default hyperparameters
svc=SVC()


# fit classifier to training set
svc.fit(X_train,y_train)


# make predictions on test set
y_pred=svc.predict(X_test)


# compute and print accuracy score
print('Model accuracy score with default hyperparameters: {0:0.4f}'. format(accuracy_score(y_test, y_pred)))

# Classification report
from sklearn.metrics import classification_report
print("Accuracy on unknown data is",classification_report(y_test,y2,digits=4))

# Run SVM with rbf kernel and C=100.0

svc=SVC(C=100.0)


# Fit classifier to training set
svc.fit(X_train,y_train)


# Make predictions on test set
y_pred=svc.predict(X_test)


# Compute and print accuracy score
print('Model accuracy score with rbf kernel and C=100.0 : {0:0.4f}'. format(accuracy_score(y_test, y_pred)))

# Classification report
from sklearn.metrics import classification_report
print("Accuracy on unknown data is",classification_report(y_test,y_pred, digits=4))

#Confusion matrix


from sklearn.metrics import confusion_matrix

cm = confusion_matrix(y_test, y_pred)

print('Confusion matrix\n\n', cm)

# Run SVM with rbf kernel and C=1000.0

svc=SVC(C=1000.0)


# fit classifier to training set
svc.fit(X_train,y_train)


# make predictions on test set
y_pred=svc.predict(X_test)


# compute and print accuracy score
print('Model accuracy score with rbf kernel and C=1000.0 : {0:0.4f}'. format(accuracy_score(y_test, y_pred)))

#fromulating the Classification report
from sklearn.metrics import classification_report
print("Accuracy on unknown data is",classification_report(y_test,y_pred, digits=4))

# Run SVM with linear kernel
# instantiate classifier with linear kernel and C=1.0
linear_svc=SVC(kernel='linear', C=1.0)


# fit classifier to training set
linear_svc.fit(X_train,y_train)


# make predictions on test set
y_pred_test=linear_svc.predict(X_test)


# compute and print accuracy score
print('Model accuracy score with linear kernel and C=1.0 : {0:0.4f}'. format(accuracy_score(y_test, y_pred_test)))

# Classification report
from sklearn.metrics import classification_report
print("Accuracy on unknown data is",classification_report(y_test,y_pred_test,digits=4))

# Run SVM with linear kernel and C=100.0

linear_svc100=SVC(kernel='linear', C=100.0)


# fit classifier to training set
linear_svc100.fit(X_train, y_train)


# make predictions on test set
y_pred=linear_svc100.predict(X_test)


# compute and print accuracy score
print('Model accuracy score with linear kernel and C=100.0 : {0:0.4f}'. format(accuracy_score(y_test, y_pred)))

#fromulating the Classification report
from sklearn.metrics import classification_report
print("Accuracy on unknown data is",classification_report(y_test,y_pred,digits=4))

# Run SVM with linear kernel and C=1000.0

linear_svc1000=SVC(kernel='linear', C=1000.0)


# fit classifier to training set
linear_svc1000.fit(X_train, y_train)


# make predictions on test set
y_pred=linear_svc1000.predict(X_test)


# compute and print accuracy score
print('Model accuracy score with linear kernel and C=1000.0 : {0:0.4f}'. format(accuracy_score(y_test, y_pred)))

# Classification report
from sklearn.metrics import classification_report
print("Accuracy on unknown data is",classification_report(y_test,y_pred,digits=4))

#Compare the train-set and test-set accuracy

y_pred_train = linear_svc.predict(X_train)

y_pred_train

print('Training-set accuracy score: {0:0.4f}'. format(accuracy_score(y_train, y_pred_train)))

#Check for overfitting and underfitting

print('Training set score: {:.4f}'.format(linear_svc.score(X_train, y_train)))

print('Test set score: {:.4f}'.format(linear_svc.score(X_test, y_test)))

#Classification report
from sklearn.metrics import classification_report
print("Accuracy on unknown data is",classification_report(y_test,y_pred,digits=4))

# Run SVM with polynomial kernel

poly_svc=SVC(kernel='poly', C=1.0)

# fit classifier to training set
poly_svc.fit(X_train,y_train)

# make predictions on test set
y_pred=poly_svc.predict(X_test)

# compute and print accuracy score
print('Model accuracy score with polynomial kernel and C=1.0 : {0:0.4f}'. format(accuracy_score(y_test, y_pred)))

# Classification report
from sklearn.metrics import classification_report
print("Accuracy on unknown data is",classification_report(y_test,y_pred,digits=4))

# Classifier with polynomial kernel and C=100.0
poly_svc100=SVC(kernel='poly', C=100.0)


# fit classifier to training set
poly_svc100.fit(X_train, y_train)


# make predictions on test set
y_pred=poly_svc100.predict(X_test)


# compute and print accuracy score
print('Model accuracy score with polynomial kernel and C=1.0 : {0:0.4f}'. format(accuracy_score(y_test, y_pred)))

# Classification metrices
from sklearn.metrics import classification_report

print(classification_report(y_test, y_pred_test, digits=4))